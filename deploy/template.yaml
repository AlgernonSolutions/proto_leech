AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: the backbone of a leech extraction tentacle

Metadata:
  AWS::ServerlessRepo::Application:
    Name: LeechTentacle
    Description: the backbone of a leech extraction tentacle
    Author: jcubeta
    SpdxLicenseId: GPL-3.0-or-later
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['serverless', 'algernon', 'leech', 'etl', 'data_mining']
    HomePageUrl: https://github.com/AlgernonSolutions/proto_leech
    SemanticVersion: 0.7.0
    SourceCodeUrl: https://github.com/AlgernonSolutions/proto_leech

Parameters:
  IsDev:
    Type: String
    Default: 'False'
    AllowedValues:
      - 'False'
      - 'True'
  TableName:
    Type: String
    Description: the name to be applied to the generated Dynamo Table
  HashKeyName:
    Type: String
    Description: the name of the field used as the hash key in the table
    Default: identifier_stem
  SortKeyName:
    Type: String
    Description: the name of the field used as teh sort key in the table
    Default: sid_value
  LeechBucketName:
    Type: String
    Description: the name of the S3 bucket shared across the application
    Default: algernonsolutions-leech-prod
  NucleusAccountId:
    Type: String
    Description: the account id of the storage account
  NucleusAccountBusName:
    Type: String
    Description: the name of the EventBus used by the storage account
  OrganizationId:
    Type: String
    Description: the ID of the organization in which the Leech operates
  ExtractionMachineArn:
    Type: String
    Description: the ARN of the SFN machine used to perform the actual extraction
  ExtractionTimeoutSeconds:
    Type: Number
    Description: the number of seconds to wait on the extractor before considering it timed out
    Default: 60
  ProcessingMachineArn:
    Type: String
    Description: the ARN of the SFN machine used to process the extracted data
  ProcessingTimeoutSeconds:
    Type: Number
    Description: the number of seconds to wait on the processor before considering it timed out
    Default: 60

Globals:
  Function:
    Runtime: python3.8
    Tracing: Active
    MemorySize: 256
    Layers:
      - !Ref MoncriefLayer
    Environment:
      Variables:
        DEBUG: !Ref IsDev
        BUCKET_NAME: !Ref LeechBucketName
        API_TABLE_NAME: !Ref TableName
        HASH_KEY_NAME: !Ref HashKeyName
        SORT_KEY_NAME: !Ref SortKeyName
        QUEUE_URL: !Ref Queue

Resources:
  #lambda layer
  MoncriefLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: moncrief_leech
      ContentUri: C:\Users\jcubeta\.leech\layers\3\
      CompatibleRuntimes:
        - python3.8

  # functions
  ApiHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: toll_booth.handler.serve_api_call
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      CodeUri: ../src/
      MemorySize: 256
      Environment:
        Variables:
          EXTRACTION_MACHINE_ARN: !Ref ExtractionMachine
      Events:
        apiPost:
          Type: Api
          Properties:
            Auth:
              Authorizer: AWS_IAM
            Path: /{proxy+}
            Method: post
        apiGet:
          Type: Api
          Properties:
            Auth:
              Authorizer: AWS_IAM
            Path: /{proxy+}
            Method: get
  QueueHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: toll_booth.handler.work_queue
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      CodeUri: ../src/
      MemorySize: 256
      Environment:
        Variables:
          EXTRACTION_MACHINE_ARN: !Ref ExtractionMachine
      Events:
        eventQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 10
            Enabled: false
  DirectHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: toll_booth.handler.direct_invoke
      Role: !GetAtt LambdaRole.Arn
      Timeout: 600
      CodeUri: ../src/

  # iam roles
  SfnRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: work_sfn_role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
      Policies:
        - PolicyName: workSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: '*'
        - PolicyName: workSfn
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                  - 'states:DescribeExecution'
                  - 'states:StopExecution'
                  - 'events:PutTargets'
                  - 'events:PutRule'
                  - 'events:DescribeRule'
                Resource: '*'
        - PolicyName: invokeLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
  PublishRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: publish_event_role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
      Policies:
        - PolicyName: publishEvents
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: !Sub 'arn:aws:events:us-east-1:${NucleusAccountId}:event-bus/${NucleusAccountBusName}'
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: work_lambda_role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
      Policies:
        - PolicyName: workS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource: '*'
        - PolicyName: publishEvents
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'events:PutEvents'
                Resource: '*'
        - PolicyName: writeLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
        - PolicyName: workDynamo
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:ListGlobalTables'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:ListTables'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ListBackups'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DescribeTimeToLive'
                Resource: !GetAtt Table.Arn
        - PolicyName: readSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: '*'
        - PolicyName: readSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: '*'
        - PolicyName: workStates
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                  - "states:SendTaskHeartbeat"
                Resource: '*'
        - PolicyName: workXRay
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: '*'
        - PolicyName: read_ssm
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:Get*"
                Resource: '*'
        - PolicyName: workSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:ChangeMessageVisibilityBatch'
                  - 'sqs:ChangeMessageVisibility'
                  - 'sqs:SendMessageBatch'
                  - 'sqs:SendMessage'
                Resource: !GetAtt Queue.Arn
  EventsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: events_role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - 'events.amazonaws.com'
      Policies:
        - PolicyName: send_sqs_message
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:Send*'
                Resource: '*'
        - PolicyName: start_machine
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource: '*'

  # sqs
  WineBarrel:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: spurious-wine
      KmsMasterKeyId: alias/aws/sqs
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      QueueName: spurious-queue
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WineBarrel.Arn
        maxReceiveCount: 50

  # dynamo
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: !Ref SortKeyName
          AttributeType: S
        - AttributeName: !Ref HashKeyName
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - KeyType: HASH
          AttributeName: !Ref HashKeyName
        - KeyType: RANGE
          AttributeName: !Ref SortKeyName
      TableName: !Ref TableName

  # event bridge
  EventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      Action: "events:PutEvents"
      Principal: "*"
      StatementId: "OrganizationAccess"
      Condition:
        Type: "StringEquals"
        Key: "aws:PrincipalOrgID"
        Value: !Ref OrganizationId
  ExtractionInvocationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: listens for cross account calls to invoke a snapshot
      EventPattern:
        detail-type:
          - "take_snapshot"
      Name: extraction_invocation
      State: ENABLED
      Targets:
        - Id: queue_message
          Arn: !GetAtt Queue.Arn
          InputPath: $.detail
  HourlyTimerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: hourly timer to trigger the baseline snapshots of the CredibleWS source
      ScheduleExpression: rate(1 hour)
      Name: hourly_timer
      State: ENABLED
      Targets:
        - Id: timer_fn
          Arn: !GetAtt DirectHandler.Arn
          Input: '{"path": "/hourly_timer", "payload": {"source_name": "NightRider"}}'
  PublishExtractedDataRule:
    Type: AWS::Events::Rule
    Properties:
      Description: invoked to send data cross account to the storage account
      EventPattern:
        source:
          - "night_rider"
        detail-type:
          - "publish_extracted_data"
      Name: publish_extracted_data
      State: ENABLED
      Targets:
        - Id: storage_account_bus
          Arn: !Sub 'arn:aws:events:us-east-1:${NucleusAccountId}:event-bus/${NucleusAccountBusName}'
          RoleArn: !GetAtt PublishRole.Arn

  # step functions
  ExtractionMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - >
          {
            "StartAt": "get_configs",
            "States": {
              "get_configs": {
                "Type": "Task",
                "Parameters": {
                  "path": "/generate_extraction_config",
                  "payload": {
                    "id_source.$": "$$.Execution.Input.id_source",
                    "source_name.$": "$$.Execution.Input.source_name",
                    "extraction_type.$": "$$.Execution.Input.extraction_type",
                    "extraction_params.$": "$$.Execution.Input.extraction_params"
                  }
                },
                "Resource": "${FnArn}",
                "ResultPath": "$.configs",
                "Retry": [ {
                   "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                   "IntervalSeconds": 2,
                   "MaxAttempts": 6,
                   "BackoffRate": 2
                } ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "mark_failed"
                  }
                ],
                "Next": "extract"
              },
              "extract": {
                "Type": "Task",
                "Resource": "arn:aws:states:::states:startExecution.sync",
                "Parameters": {
                  "StateMachineArn": "${ExtractionMachineArn}",
                  "Input": {
                    "extraction_config.$": "$.configs.extraction_config",
                    "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                  }
                },
                "ResultPath": "$.extraction",
                "TimeoutSeconds": ${ExtractionTimeoutSeconds},
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "mark_failed"
                  }
                ],
                "Next": "process_extraction"
              },
              "process_extraction": {
                "Type": "Task",
                "Resource": "arn:aws:states:::states:startExecution.sync",
                "Parameters": {
                  "StateMachineArn": "${ProcessingMachineArn}",
                  "Input": {
                    "extraction_config.$": "$.configs.extraction_config",
                    "extracted_data.$": "$.extraction.extracted_data",
                    "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                  }
                },
                "ResultPath": "$.process",
                "TimeoutSeconds": ${ProcessingTimeoutSeconds},
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "mark_failed"
                  }
                ],
                "Next": "broadcast_extracted_assets"
              },
              "broadcast_extracted_assets": {
                "Type": "Task",
                "Parameters": {
                  "path": "/broadcast_extracted_assets",
                  "payload": {
                    "processed_extraction.$": "$.process.processed_extraction"
                  }
                },
                "Resource": "${FnArn}",
                "ResultPath": "$.broadcast",
                "Retry": [
                  {
                    "ErrorEquals": ["NoSuchKey"],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                  },
                  {
                     "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                  } ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "mark_failed"
                  }
                ],
                "Next": "mark_success"
              },
              "fail": {
               "Type": "Fail"
              },
              "mark_failed": {
                "Type": "Task",
                "Resource": "${FnArn}",
                "Parameters": {
                  "path": "/mark_execution_fail",
                  "payload": {
                    "identifier_stem.$": "$$.Execution.Input.identifier_stem",
                    "execution_id.$": "$$.Execution.Input.execution_id"
                  }
                },
                "Next": "fail"
              },
              "mark_success": {
                "Type": "Task",
                "Resource": "${FnArn}",
                "Parameters": {
                  "path": "/mark_execution_success",
                  "payload": {
                    "identifier_stem.$": "$$.Execution.Input.identifier_stem",
                    "execution_id.$": "$$.Execution.Input.execution_id"
                  }
                },
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "mark_failed"
                  }
                ],
                "End": true
              }
            }
          }
        - FnArn: !GetAtt DirectHandler.Arn
      RoleArn: !GetAtt SfnRole.Arn
      StateMachineName: extractor

Outputs:
  LambdaRoleArn:
    Description: the ARN of the IAM role used by the backbone for Lambda operations
    Value: !GetAtt LambdaRole.Arn
  QueueUrl:
    Description: the URL of the SQS queue used by the backbone
    Value: !Ref Queue
  LayerArn:
    Description: the ARN of the generated lambda layer
    Value: !Ref MoncriefLayer